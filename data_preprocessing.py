import streamlit as st
import pandas as pd
import numpy as np


def preprocess_data(df: pd.DataFrame) -> pd.DataFrame:
    """
    Базовая предобработка:
    1. Заполнение пропусков.
    2. Учёт сезонности (добавляем столбец SeasonFlag).
    3. Если нужно - учёт праздничных дней.
    4. Подготовка к дальнейшему анализу.
    """

    # 1. Заполним пропуски нулями (или другой логикой, если нужно)
    df = df.fillna(0)

    # 2. Добавим признак сезонности (SeasonFlag).
    #    Допустим, считаем июнь, июль, август "летними" месяцами — спрос растёт на сезонные товары.
    #    Так как Month может быть либо числом, либо названием, проверим это.

    # Пример: если 'Month' хранит текст ("January", "February" ... "December"),
    # тогда мы считаем '["June", "July", "August"]' летними месяцами.
    # Если же это числа (1..12), тогда [6,7,8].

    # Предположим, у вас Month = "January", "February", ...
    summer_months = {"June", "July", "August"}

    def is_summer(month):
        return 1 if month in summer_months else 0

    df["SeasonFlag"] = df["Month"].apply(is_summer)

    # 3. Учёт праздничных дней:
    #    - Если у нас есть список праздничных дней (допустим, в 'holidays.csv') или
    #      другой способ определить, что Week/Montn - праздничная неделя/месяц,
    #      можно сделать отдельный столбец, например, HolidayFlag = 1, если дата попадает в праздник.
    #
    #    - Здесь пример упрощённый, т.к. мы не имеем точной даты.
    #      Покажем лишь "заготовку", как это может выглядеть.

    # Пример (заготовка):
    #holiday_weeks = [1, 52]  # условно, 1-я неделя и 52-я — праздничные периоды
    # df["HolidayFlag"] = df["Week"].apply(lambda w: 1 if w in holiday_weeks else 0)

    # 4. Можно проверить, если нет столбцов под рестораны, где ожидаем, заменим их нулями
    #    но это будет более специфично для вашего проекта.
    #    Сейчас оставим как есть.

    # 5. Вернём обновлённый DataFrame
    return df
